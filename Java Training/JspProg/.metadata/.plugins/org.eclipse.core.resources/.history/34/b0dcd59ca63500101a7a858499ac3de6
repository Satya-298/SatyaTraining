package com.java.jsf.controller;

import java.util.List;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import com.java.jsf.dao.DoctorDao;
import com.java.jsf.model.Doctor;
import com.java.jsf.model.Specialization;

public class DoctorController {

    private DoctorDao doctorDao; 
    private Doctor doctor; 
    private Specialization selectedspecialization;
    private List<Doctor> filteredDoctors;
    private String message; 

    public DoctorDao getDoctorDao() {
        return doctorDao;
    }

    public void setDoctorDao(DoctorDao doctorDao) {
        this.doctorDao = doctorDao;
    }

    public Doctor getDoctor() {
        return doctor;
    }

    public void setDoctor(Doctor doctor) {
        this.doctor = doctor;
    }
    
    public Specialization getSelectedspecialization() {
		return selectedspecialization;
	}

	public void setSelectedspecialization(Specialization selectedspecialization) {
		this.selectedspecialization = selectedspecialization;
	}
	
	public List<Doctor> getFilteredDoctors() {
		return filteredDoctors;
	}

	public void setFilteredDoctors(List<Doctor> filteredDoctors) {
		this.filteredDoctors = filteredDoctors;
	}

	public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
		this.message = message;
	}
	
	public DoctorController() {
        
    }
    
    public List<Doctor> getshowAllDoctors() {
        return doctorDao.showAllDoctors();
    }
    
    public String searchByCategory() {
        FacesContext context = FacesContext.getCurrentInstance();

        if (selectedspecialization != null) {
            filteredDoctors = doctorDao.showDoctorsByCategory(selectedspecialization);
            if (filteredDoctors != null && !filteredDoctors.isEmpty()) {
                context.addMessage(null, new FacesMessage("Doctors found for specialization: " + selectedspecialization));
            } else {
                context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, "No doctors found for selected category.", null));
            }
        } else {
            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Please select a specialization.", null));
        }

        return "DoctorDashboard?faces-redirect=true";
    }

    public String searchedDoctorById() {
        FacesContext context = FacesContext.getCurrentInstance();

        Doctor foundDoctor = doctorDao.searchDoctorById(doctor.getDoctorId());
        if (foundDoctor != null) {
            this.doctor = foundDoctor;
            context.addMessage(null, new FacesMessage("Doctor found: " + foundDoctor.getDoctorName()));
        } else {
            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, "Doctor not found with ID: " + doctor.getDoctorId(), null));
        }

        return "DoctorDashboard?faces-redirect=true";
    }
    
    public String addDoctor() {
        String result = doctorDao.addDoctor(doctor);
        FacesContext context = FacesContext.getCurrentInstance();

        if (result != null && result.contains("Inserted")) {
            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Doctor added successfully.", null));
        } else {
            context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Failed to add doctor.", null));
        }

        return "DoctorDashboard?faces-redirect=true"; // Redirect to dashboard
    }
}
