package com.java.jsf.controller;

import java.util.List;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import com.java.jsf.dao.DoctorDao;
import com.java.jsf.model.Doctor;
import com.java.jsf.model.Specialization;

public class DoctorController {

    private DoctorDao doctorDao; 
    private Doctor doctor; 
    private Specialization selectedspecialization;
    private List<Doctor> filteredDoctors;
    private String message; 

    public DoctorDao getDoctorDao() {
        return doctorDao;
    }

    public void setDoctorDao(DoctorDao doctorDao) {
        this.doctorDao = doctorDao;
    }

    public Doctor getDoctor() {
        return doctor;
    }

    public void setDoctor(Doctor doctor) {
        this.doctor = doctor;
    }
    
    public Specialization getSelectedspecialization() {
		return selectedspecialization;
	}

	public void setSelectedspecialization(Specialization selectedspecialization) {
		this.selectedspecialization = selectedspecialization;
	}
	
	public List<Doctor> getFilteredDoctors() {
		return filteredDoctors;
	}

	public void setFilteredDoctors(List<Doctor> filteredDoctors) {
		this.filteredDoctors = filteredDoctors;
	}

	public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
		this.message = message;
	}
	
	public DoctorController() {
        
    }
    
    public List<Doctor> getshowAllDoctors() {
        return doctorDao.showAllDoctors();
    }
    
    public String searchByCategory() {
        if (selectedspecialization != null) {
            filteredDoctors = doctorDao.showDoctorsByCategory(selectedspecialization);
        }
        return null; // This will stay on the same page
    }
    
    public Doctor searchedDoctorById() {
    	Doctor foundDoctor = doctorDao.searchDoctorById(doctor.getDoctorId());
        if (foundDoctor != null) {
            this.doctor = foundDoctor;
        }
        return null;
    }
    
    public String addDoctor() {
        String result = doctorDao.addDoctor(doctor);
        if (result != null && result.contains("Inserted")) {
            message = "Doctor added successfully."; 
        } else {
            message = "Failed to add doctor.";
        }
        return "doctorDashboard?faces-redirect=true";  // This will redirect to the doctor dashboard page after adding
    }


	public void clearMessage() {
        this.message = null;
    }
	
	
	// for form appearance
	
	private boolean showAddForm;
	private boolean showSearchByIdForm;
	private boolean showSearchByCategoryForm;

	// Getters and Setters
	public boolean isShowAddForm() {
	    return showAddForm;
	}
	public void setShowAddForm(boolean showAddForm) {
	    this.showAddForm = showAddForm;
	}

	public boolean isShowSearchByIdForm() {
	    return showSearchByIdForm;
	}
	public void setShowSearchByIdForm(boolean showSearchByIdForm) {
	    this.showSearchByIdForm = showSearchByIdForm;
	}

	public boolean isShowSearchByCategoryForm() {
	    return showSearchByCategoryForm;
	}
	public void setShowSearchByCategoryForm(boolean showSearchByCategoryForm) {
	    this.showSearchByCategoryForm = showSearchByCategoryForm;
	}

	// Show/hide handlers
	public String showAddDoctorForm() {
	    resetForms();
	    this.doctor = new Doctor();
	    this.showAddForm = true;
	    return null;
	}

	public String showSearchByIdForm() {
	    resetForms();
	    this.doctor = new Doctor();
	    this.showSearchByIdForm = true;
	    return null;
	}

	public String showSearchByCategoryForm() {
	    resetForms();
	    this.selectedspecialization = null;
	    this.showSearchByCategoryForm = true;
	    return null;
	}

	// Utility to hide all
	private void resetForms() {
	    this.showAddForm = false;
	    this.showSearchByIdForm = false;
	    this.showSearchByCategoryForm = false;
	    this.message = null;
	}


}
