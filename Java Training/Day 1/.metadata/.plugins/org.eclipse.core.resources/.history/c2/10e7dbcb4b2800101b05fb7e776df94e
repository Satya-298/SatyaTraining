package com.java.jdbc.bal;

import com.java.jdbc.dao.CrimeAnalysisServiceImpl;
import com.java.jdbc.dao.ICrimeAnalysisService;
import com.java.jdbc.model.IncidentType;
import com.java.jdbc.model.Incidents;
import com.java.jdbc.model.Status;

public class CrimeAnalysisServiceBal {
	
	static ICrimeAnalysisService dao;
	static StringBuilder sb;
	
	static 
	{
		dao = new CrimeAnalysisServiceImpl();
		sb = new StringBuilder();
	}
	
	public boolean validateIncident(Incidents incident) {
		
		boolean isValidate = true;
		if (incident.getIncidentType() != IncidentType.Robbery 
			&& incident.getIncidentType() != IncidentType.Homicide 
			&& incident.getIncidentType() != IncidentType.Theft) {
			sb.append("IncidentType should be Valid (Robbery,Homicide,Theft\r\n)");
			isValidate = false;
		}
		
		long currentTime = System.currentTimeMillis();
		long inputTime = incident.getIncidentDate().getTime();
				
		if (incident.getIncidentDate() != null 
				&& inputTime <= currentTime  ) {
			sb.append("Incident Date should not be null or in future\r\n");
			isValidate = false;
		}
		
		if (incident.getLatitude() >= -90 
			&& incident.getLatitude() <= 90) {
			
			sb.append("Latitude should be between -90 and 90\r\n");
			isValidate = false;
		}	
		
		if (incident.getLongitude() >= -180 
			&& incident.getLatitude() <= 180) {
			
			sb.append("Longitude should be between -180 and 180\r\n");
			isValidate = false;
		}	
		
		if (incident.getDescriptions() != null 
			&& incident.getDescriptions().length() <= 500) {
			
			sb.append("Descriptions should not be null or exceed 500 characters\r\n");
			isValidate = false;
		}
		
		if (incident.getStatus() != Status.Open 
			&& incident.getStatus() != Status.Closed
			&& incident.getStatus() != Status.Under_Investigation) {
			
			sb.append("Status must be Open/Closed/Under_Investigation\r\n");
			isValidate = false;
		}
		
		if (incident.getAgencyId() > 0) {
			
			sb.append("AgencyId must be positive");
		} else {
			Connection conn = 
			isValidate = false;
		}
		
		if (incident.getOfficerId() > 0 && ) {
			
			sb.append("OfficerId must be positive or not present in database\r\n");
			isValidate = false;
		}
		return false;
		
	}
	

}
